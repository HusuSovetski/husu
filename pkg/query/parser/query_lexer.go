// Code generated from /Users/i322053/goworkspace/src/github.com/Peripli/service-manager/pkg/query/Query.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)
// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter


var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 16, 138, 
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 
	3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 47, 10, 
	5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 71, 
	10, 6, 3, 7, 3, 7, 3, 7, 5, 7, 76, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 
	3, 8, 7, 8, 84, 10, 8, 12, 8, 14, 8, 87, 11, 8, 3, 8, 3, 8, 3, 9, 3, 9, 
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 100, 10, 9, 3, 10, 5, 10, 
	103, 10, 10, 3, 10, 6, 10, 106, 10, 10, 13, 10, 14, 10, 107, 3, 10, 3, 
	10, 6, 10, 112, 10, 10, 13, 10, 14, 10, 113, 5, 10, 116, 10, 10, 3, 11, 
	3, 11, 3, 12, 6, 12, 121, 10, 12, 13, 12, 14, 12, 122, 3, 13, 3, 13, 3, 
	13, 5, 13, 128, 10, 13, 3, 14, 3, 14, 3, 15, 6, 15, 133, 10, 15, 13, 15, 
	14, 15, 134, 3, 15, 3, 15, 2, 2, 16, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 
	8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 3, 2, 
	7, 4, 2, 41, 41, 94, 94, 3, 2, 50, 59, 4, 2, 45, 45, 47, 47, 8, 2, 47, 
	47, 49, 59, 67, 92, 94, 94, 97, 97, 99, 124, 5, 2, 11, 12, 15, 15, 34, 
	34, 2, 157, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 
	3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 
	17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 
	2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 3, 31, 3, 2, 2, 
	2, 5, 35, 3, 2, 2, 2, 7, 37, 3, 2, 2, 2, 9, 46, 3, 2, 2, 2, 11, 70, 3, 
	2, 2, 2, 13, 75, 3, 2, 2, 2, 15, 77, 3, 2, 2, 2, 17, 99, 3, 2, 2, 2, 19, 
	102, 3, 2, 2, 2, 21, 117, 3, 2, 2, 2, 23, 120, 3, 2, 2, 2, 25, 127, 3, 
	2, 2, 2, 27, 129, 3, 2, 2, 2, 29, 132, 3, 2, 2, 2, 31, 32, 7, 99, 2, 2, 
	32, 33, 7, 112, 2, 2, 33, 34, 7, 102, 2, 2, 34, 4, 3, 2, 2, 2, 35, 36, 
	7, 42, 2, 2, 36, 6, 3, 2, 2, 2, 37, 38, 7, 43, 2, 2, 38, 8, 3, 2, 2, 2, 
	39, 40, 7, 107, 2, 2, 40, 47, 7, 112, 2, 2, 41, 42, 7, 112, 2, 2, 42, 43, 
	7, 113, 2, 2, 43, 44, 7, 118, 2, 2, 44, 45, 7, 107, 2, 2, 45, 47, 7, 112, 
	2, 2, 46, 39, 3, 2, 2, 2, 46, 41, 3, 2, 2, 2, 47, 10, 3, 2, 2, 2, 48, 49, 
	7, 103, 2, 2, 49, 71, 7, 115, 2, 2, 50, 51, 7, 112, 2, 2, 51, 52, 7, 103, 
	2, 2, 52, 71, 7, 115, 2, 2, 53, 54, 7, 105, 2, 2, 54, 71, 7, 118, 2, 2, 
	55, 56, 7, 110, 2, 2, 56, 71, 7, 118, 2, 2, 57, 58, 7, 105, 2, 2, 58, 59, 
	7, 118, 2, 2, 59, 71, 7, 103, 2, 2, 60, 61, 7, 110, 2, 2, 61, 62, 7, 118, 
	2, 2, 62, 71, 7, 103, 2, 2, 63, 64, 7, 103, 2, 2, 64, 65, 7, 115, 2, 2, 
	65, 66, 7, 113, 2, 2, 66, 67, 7, 116, 2, 2, 67, 68, 7, 112, 2, 2, 68, 69, 
	7, 107, 2, 2, 69, 71, 7, 110, 2, 2, 70, 48, 3, 2, 2, 2, 70, 50, 3, 2, 2, 
	2, 70, 53, 3, 2, 2, 2, 70, 55, 3, 2, 2, 2, 70, 57, 3, 2, 2, 2, 70, 60, 
	3, 2, 2, 2, 70, 63, 3, 2, 2, 2, 71, 12, 3, 2, 2, 2, 72, 76, 5, 15, 8, 2, 
	73, 76, 5, 19, 10, 2, 74, 76, 5, 17, 9, 2, 75, 72, 3, 2, 2, 2, 75, 73, 
	3, 2, 2, 2, 75, 74, 3, 2, 2, 2, 76, 14, 3, 2, 2, 2, 77, 85, 7, 41, 2, 2, 
	78, 79, 7, 94, 2, 2, 79, 84, 11, 2, 2, 2, 80, 81, 7, 41, 2, 2, 81, 84, 
	7, 41, 2, 2, 82, 84, 10, 2, 2, 2, 83, 78, 3, 2, 2, 2, 83, 80, 3, 2, 2, 
	2, 83, 82, 3, 2, 2, 2, 84, 87, 3, 2, 2, 2, 85, 83, 3, 2, 2, 2, 85, 86, 
	3, 2, 2, 2, 86, 88, 3, 2, 2, 2, 87, 85, 3, 2, 2, 2, 88, 89, 7, 41, 2, 2, 
	89, 16, 3, 2, 2, 2, 90, 91, 7, 118, 2, 2, 91, 92, 7, 116, 2, 2, 92, 93, 
	7, 119, 2, 2, 93, 100, 7, 103, 2, 2, 94, 95, 7, 104, 2, 2, 95, 96, 7, 99, 
	2, 2, 96, 97, 7, 110, 2, 2, 97, 98, 7, 117, 2, 2, 98, 100, 7, 103, 2, 2, 
	99, 90, 3, 2, 2, 2, 99, 94, 3, 2, 2, 2, 100, 18, 3, 2, 2, 2, 101, 103, 
	5, 21, 11, 2, 102, 101, 3, 2, 2, 2, 102, 103, 3, 2, 2, 2, 103, 105, 3, 
	2, 2, 2, 104, 106, 9, 3, 2, 2, 105, 104, 3, 2, 2, 2, 106, 107, 3, 2, 2, 
	2, 107, 105, 3, 2, 2, 2, 107, 108, 3, 2, 2, 2, 108, 115, 3, 2, 2, 2, 109, 
	111, 7, 48, 2, 2, 110, 112, 9, 3, 2, 2, 111, 110, 3, 2, 2, 2, 112, 113, 
	3, 2, 2, 2, 113, 111, 3, 2, 2, 2, 113, 114, 3, 2, 2, 2, 114, 116, 3, 2, 
	2, 2, 115, 109, 3, 2, 2, 2, 115, 116, 3, 2, 2, 2, 116, 20, 3, 2, 2, 2, 
	117, 118, 9, 4, 2, 2, 118, 22, 3, 2, 2, 2, 119, 121, 9, 5, 2, 2, 120, 119, 
	3, 2, 2, 2, 121, 122, 3, 2, 2, 2, 122, 120, 3, 2, 2, 2, 122, 123, 3, 2, 
	2, 2, 123, 24, 3, 2, 2, 2, 124, 128, 7, 46, 2, 2, 125, 126, 7, 46, 2, 2, 
	126, 128, 7, 34, 2, 2, 127, 124, 3, 2, 2, 2, 127, 125, 3, 2, 2, 2, 128, 
	26, 3, 2, 2, 2, 129, 130, 7, 34, 2, 2, 130, 28, 3, 2, 2, 2, 131, 133, 9, 
	6, 2, 2, 132, 131, 3, 2, 2, 2, 133, 134, 3, 2, 2, 2, 134, 132, 3, 2, 2, 
	2, 134, 135, 3, 2, 2, 2, 135, 136, 3, 2, 2, 2, 136, 137, 8, 15, 2, 2, 137, 
	30, 3, 2, 2, 2, 16, 2, 46, 70, 75, 83, 85, 99, 102, 107, 113, 115, 122, 
	127, 134, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'and'", "'('", "')'", "", "", "", "", "", "", "", "", "", "' '",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "MultiOp", "UniOp", "Value", "STRING", "BOOLEAN", "NUMBER", 
	"SIGN", "Key", "ValueSeparator", "Whitespace", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "MultiOp", "UniOp", "Value", "STRING", "BOOLEAN", 
	"NUMBER", "SIGN", "Key", "ValueSeparator", "Whitespace", "WS",
}

type QueryLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewQueryLexer(input antlr.CharStream) *QueryLexer {

	l := new(QueryLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Query.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// QueryLexer tokens.
const (
	QueryLexerT__0 = 1
	QueryLexerT__1 = 2
	QueryLexerT__2 = 3
	QueryLexerMultiOp = 4
	QueryLexerUniOp = 5
	QueryLexerValue = 6
	QueryLexerSTRING = 7
	QueryLexerBOOLEAN = 8
	QueryLexerNUMBER = 9
	QueryLexerSIGN = 10
	QueryLexerKey = 11
	QueryLexerValueSeparator = 12
	QueryLexerWhitespace = 13
	QueryLexerWS = 14
)

