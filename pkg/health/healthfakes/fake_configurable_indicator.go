// Code generated by counterfeiter. DO NOT EDIT.
package healthfakes

import (
	"sync"
	"time"

	"github.com/Peripli/service-manager/pkg/health"
)

type FakeConfigurableIndicator struct {
	ConfigureStub        func(*health.IndicatorSettings)
	configureMutex       sync.RWMutex
	configureArgsForCall []struct {
		arg1 *health.IndicatorSettings
	}
	FailuresTresholdStub        func() int64
	failuresTresholdMutex       sync.RWMutex
	failuresTresholdArgsForCall []struct {
	}
	failuresTresholdReturns struct {
		result1 int64
	}
	failuresTresholdReturnsOnCall map[int]struct {
		result1 int64
	}
	FatalStub        func() bool
	fatalMutex       sync.RWMutex
	fatalArgsForCall []struct {
	}
	fatalReturns struct {
		result1 bool
	}
	fatalReturnsOnCall map[int]struct {
		result1 bool
	}
	IntervalStub        func() time.Duration
	intervalMutex       sync.RWMutex
	intervalArgsForCall []struct {
	}
	intervalReturns struct {
		result1 time.Duration
	}
	intervalReturnsOnCall map[int]struct {
		result1 time.Duration
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	StatusStub        func() (interface{}, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
	}
	statusReturns struct {
		result1 interface{}
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfigurableIndicator) Configure(arg1 *health.IndicatorSettings) {
	fake.configureMutex.Lock()
	fake.configureArgsForCall = append(fake.configureArgsForCall, struct {
		arg1 *health.IndicatorSettings
	}{arg1})
	fake.recordInvocation("Configure", []interface{}{arg1})
	fake.configureMutex.Unlock()
	if fake.ConfigureStub != nil {
		fake.ConfigureStub(arg1)
	}
}

func (fake *FakeConfigurableIndicator) ConfigureCallCount() int {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return len(fake.configureArgsForCall)
}

func (fake *FakeConfigurableIndicator) ConfigureCalls(stub func(*health.IndicatorSettings)) {
	fake.configureMutex.Lock()
	defer fake.configureMutex.Unlock()
	fake.ConfigureStub = stub
}

func (fake *FakeConfigurableIndicator) ConfigureArgsForCall(i int) *health.IndicatorSettings {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	argsForCall := fake.configureArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfigurableIndicator) FailuresTreshold() int64 {
	fake.failuresTresholdMutex.Lock()
	ret, specificReturn := fake.failuresTresholdReturnsOnCall[len(fake.failuresTresholdArgsForCall)]
	fake.failuresTresholdArgsForCall = append(fake.failuresTresholdArgsForCall, struct {
	}{})
	fake.recordInvocation("FailuresTreshold", []interface{}{})
	fake.failuresTresholdMutex.Unlock()
	if fake.FailuresTresholdStub != nil {
		return fake.FailuresTresholdStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.failuresTresholdReturns
	return fakeReturns.result1
}

func (fake *FakeConfigurableIndicator) FailuresTresholdCallCount() int {
	fake.failuresTresholdMutex.RLock()
	defer fake.failuresTresholdMutex.RUnlock()
	return len(fake.failuresTresholdArgsForCall)
}

func (fake *FakeConfigurableIndicator) FailuresTresholdCalls(stub func() int64) {
	fake.failuresTresholdMutex.Lock()
	defer fake.failuresTresholdMutex.Unlock()
	fake.FailuresTresholdStub = stub
}

func (fake *FakeConfigurableIndicator) FailuresTresholdReturns(result1 int64) {
	fake.failuresTresholdMutex.Lock()
	defer fake.failuresTresholdMutex.Unlock()
	fake.FailuresTresholdStub = nil
	fake.failuresTresholdReturns = struct {
		result1 int64
	}{result1}
}

func (fake *FakeConfigurableIndicator) FailuresTresholdReturnsOnCall(i int, result1 int64) {
	fake.failuresTresholdMutex.Lock()
	defer fake.failuresTresholdMutex.Unlock()
	fake.FailuresTresholdStub = nil
	if fake.failuresTresholdReturnsOnCall == nil {
		fake.failuresTresholdReturnsOnCall = make(map[int]struct {
			result1 int64
		})
	}
	fake.failuresTresholdReturnsOnCall[i] = struct {
		result1 int64
	}{result1}
}

func (fake *FakeConfigurableIndicator) Fatal() bool {
	fake.fatalMutex.Lock()
	ret, specificReturn := fake.fatalReturnsOnCall[len(fake.fatalArgsForCall)]
	fake.fatalArgsForCall = append(fake.fatalArgsForCall, struct {
	}{})
	fake.recordInvocation("Fatal", []interface{}{})
	fake.fatalMutex.Unlock()
	if fake.FatalStub != nil {
		return fake.FatalStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.fatalReturns
	return fakeReturns.result1
}

func (fake *FakeConfigurableIndicator) FatalCallCount() int {
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	return len(fake.fatalArgsForCall)
}

func (fake *FakeConfigurableIndicator) FatalCalls(stub func() bool) {
	fake.fatalMutex.Lock()
	defer fake.fatalMutex.Unlock()
	fake.FatalStub = stub
}

func (fake *FakeConfigurableIndicator) FatalReturns(result1 bool) {
	fake.fatalMutex.Lock()
	defer fake.fatalMutex.Unlock()
	fake.FatalStub = nil
	fake.fatalReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConfigurableIndicator) FatalReturnsOnCall(i int, result1 bool) {
	fake.fatalMutex.Lock()
	defer fake.fatalMutex.Unlock()
	fake.FatalStub = nil
	if fake.fatalReturnsOnCall == nil {
		fake.fatalReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.fatalReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConfigurableIndicator) Interval() time.Duration {
	fake.intervalMutex.Lock()
	ret, specificReturn := fake.intervalReturnsOnCall[len(fake.intervalArgsForCall)]
	fake.intervalArgsForCall = append(fake.intervalArgsForCall, struct {
	}{})
	fake.recordInvocation("Interval", []interface{}{})
	fake.intervalMutex.Unlock()
	if fake.IntervalStub != nil {
		return fake.IntervalStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.intervalReturns
	return fakeReturns.result1
}

func (fake *FakeConfigurableIndicator) IntervalCallCount() int {
	fake.intervalMutex.RLock()
	defer fake.intervalMutex.RUnlock()
	return len(fake.intervalArgsForCall)
}

func (fake *FakeConfigurableIndicator) IntervalCalls(stub func() time.Duration) {
	fake.intervalMutex.Lock()
	defer fake.intervalMutex.Unlock()
	fake.IntervalStub = stub
}

func (fake *FakeConfigurableIndicator) IntervalReturns(result1 time.Duration) {
	fake.intervalMutex.Lock()
	defer fake.intervalMutex.Unlock()
	fake.IntervalStub = nil
	fake.intervalReturns = struct {
		result1 time.Duration
	}{result1}
}

func (fake *FakeConfigurableIndicator) IntervalReturnsOnCall(i int, result1 time.Duration) {
	fake.intervalMutex.Lock()
	defer fake.intervalMutex.Unlock()
	fake.IntervalStub = nil
	if fake.intervalReturnsOnCall == nil {
		fake.intervalReturnsOnCall = make(map[int]struct {
			result1 time.Duration
		})
	}
	fake.intervalReturnsOnCall[i] = struct {
		result1 time.Duration
	}{result1}
}

func (fake *FakeConfigurableIndicator) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nameReturns
	return fakeReturns.result1
}

func (fake *FakeConfigurableIndicator) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeConfigurableIndicator) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeConfigurableIndicator) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigurableIndicator) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigurableIndicator) Status() (interface{}, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
	}{})
	fake.recordInvocation("Status", []interface{}{})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.statusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfigurableIndicator) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeConfigurableIndicator) StatusCalls(stub func() (interface{}, error)) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = stub
}

func (fake *FakeConfigurableIndicator) StatusReturns(result1 interface{}, result2 error) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigurableIndicator) StatusReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigurableIndicator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	fake.failuresTresholdMutex.RLock()
	defer fake.failuresTresholdMutex.RUnlock()
	fake.fatalMutex.RLock()
	defer fake.fatalMutex.RUnlock()
	fake.intervalMutex.RLock()
	defer fake.intervalMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfigurableIndicator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ health.ConfigurableIndicator = new(FakeConfigurableIndicator)
